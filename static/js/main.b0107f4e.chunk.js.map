{"version":3,"sources":["components/helpers/game-data.js","components/helpers/Store.js","components/ui/game-components/word-block/BlankSpace.js","components/ui/game-components/word-block/CorrectLetter.js","components/ui/game-components/word-block/WordBlock.js","components/ui/game-components/letter-block/LetterSquare.js","components/ui/game-components/letter-block/LetterBlock.js","components/ui/game-components/heart-block/HeartBlock.js","components/ui/game-components/details-block/DetailsBlock.js","components/ui/game-components/game-screens/GameOver.js","components/ui/game-components/game-screens/GameWin.js","components/ui/ui-elements/context-menu/ContextMenu.js","components/layout/hangman/Hangman.js","App.js","index.js"],"names":["words","getRandomWord","Math","floor","random","length","alphabet","Context","React","createContext","Store","children","useState","state","setState","gameWord","setGameWord","gameWon","setGameWon","gameOver","setGameOver","gameStarted","setGameStarted","difficulty","setDifficulty","clickedLetters","setClickedLetters","matchedLetters","setMatchedLetters","gameWinCount","setGameWinCount","gameLoseCount","setGameLoseCount","incorrectGuessCount","setIncorrectGuessCount","maxLives","setMaxLives","gameOverDisplay","setGameOverDisplay","gameWinDisplay","setGameWinDisplay","appLikes","setAppLikes","userAppLikes","setUserAppLikes","userCoins","setUserCoins","winStreak","setWinStreak","Provider","value","BlankSpace","className","CorrectLetter","letter","idx","WordBlock","useContext","gameWordState","clickedLettersState","toLowerCase","split","map","includes","LetterSquare","gameWonState","setGameWonState","gameOverState","setClickedLettersState","matchedLettersState","setMatchedLettersState","incorrectGuessCountState","setIncorrectGuessCountState","clicked","setClicked","useEffect","onClick","e","target","textContent","pv","letterInWord","forEach","wordLetter","addLettersToMatched","LetterBlock","HeartBlock","maxLivesState","shakeEffect","setShakeEffect","setTimeout","Array","x","i","class","DetailsBlock","gameWinCountState","gameLoseCountState","userCoinsState","winStreakState","GameOver","gameWordsState","setGameWordState","setGameOverDisplayState","GameWin","setGameWinDisplayState","setUserCoinsState","copyToClipboard","navigator","clipboard","writeText","ContextMenu","y","difficultyState","setDifficultyState","appLikesState","setAppLikesState","userAppLikesState","setUserAppLikesState","handleReset","style","left","top","window","open","unguessedLetters","filter","randomUnguessedLetter","Hangman","setGameOverState","setGameWinCountState","setGameLoseCountState","setMaxLivesState","gameOverDisplayState","gameWinDisplayState","modalX","setModalX","modalY","setModalY","modalView","setModalView","setWinStreakState","document","addEventListener","preventDefault","clientX","innerWidth","clientY","innerHeight","tagName","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b0107f4e.chunk.js","sourcesContent":["const words = [\r\n\t\"Algorithm\",\r\n\t\"Program\",\r\n\t\"API\",\r\n\t\"Argument\",\r\n\t\"ASCII\",\r\n\t\"Boolean\",\r\n\t\"Bug\",\r\n\t\"Char\",\r\n\t\"Objects\",\r\n\t\"Class\",\r\n\t\"Code\",\r\n\t\"Compilation\",\r\n\t\"Conditionals\",\r\n\t\"Constants\",\r\n\t\"Array\",\r\n\t\"Declaration\",\r\n\t\"Exception\",\r\n\t\"Expression\",\r\n\t\"Framework\",\r\n\t\"Hardcode\",\r\n\t\"Loop\",\r\n\t\"Iteration\",\r\n\t\"Keywords\",\r\n\t\"Null\",\r\n\t\"Operand\",\r\n\t\"Operator\",\r\n\t\"Variable\",\r\n\t\"Pointer\",\r\n\t\"Package\",\r\n\t\"Runtime\",\r\n\t\"Backend\",\r\n\t\"Statement\",\r\n\t\"Syntax\",\r\n\t\"Token\",\r\n];\r\n\r\nexport const getRandomWord = () => {\r\n\treturn words[Math.floor(Math.random() * words.length)];\r\n};\r\n\r\nexport const alphabet = [\r\n\t\"a\",\r\n\t\"b\",\r\n\t\"c\",\r\n\t\"d\",\r\n\t\"e\",\r\n\t\"f\",\r\n\t\"g\",\r\n\t\"h\",\r\n\t\"i\",\r\n\t\"j\",\r\n\t\"k\",\r\n\t\"l\",\r\n\t\"m\",\r\n\t\"n\",\r\n\t\"o\",\r\n\t\"p\",\r\n\t\"q\",\r\n\t\"r\",\r\n\t\"s\",\r\n\t\"t\",\r\n\t\"u\",\r\n\t\"v\",\r\n\t\"w\",\r\n\t\"x\",\r\n\t\"y\",\r\n\t\"z\",\r\n];\r\n","import React, { useState } from \"react\";\r\nimport { getRandomWord } from \"../../components/helpers/game-data\";\r\n\r\nexport const Context = React.createContext();\r\n\r\nconst Store = ({ children }) => {\r\n\tconst [state, setState] = useState(false);\r\n\tconst [gameWord, setGameWord] = useState(getRandomWord());\r\n\tconst [gameWon, setGameWon] = useState(false);\r\n\tconst [gameOver, setGameOver] = useState(false);\r\n\tconst [gameStarted, setGameStarted] = useState(true);\r\n\tconst [difficulty, setDifficulty] = useState(\"easy\");\r\n\tconst [clickedLetters, setClickedLetters] = useState([]);\r\n\tconst [matchedLetters, setMatchedLetters] = useState([]);\r\n\tconst [gameWinCount, setGameWinCount] = useState(0);\r\n\tconst [gameLoseCount, setGameLoseCount] = useState(0);\r\n\tconst [incorrectGuessCount, setIncorrectGuessCount] = useState(0);\r\n\tconst [maxLives, setMaxLives] = useState(5);\r\n\tconst [gameOverDisplay, setGameOverDisplay] = useState(false);\r\n\tconst [gameWinDisplay, setGameWinDisplay] = useState(false);\r\n\tconst [appLikes, setAppLikes] = useState(146);\r\n\tconst [userAppLikes, setUserAppLikes] = useState(0);\r\n\tconst [userCoins, setUserCoins] = useState(20);\r\n\tconst [winStreak, setWinStreak] = useState(0);\r\n\r\n\treturn (\r\n\t\t<Context.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\tstate: [state, setState],\r\n\t\t\t\tgameWord: [gameWord, setGameWord],\r\n\t\t\t\tgameWon: [gameWon, setGameWon],\r\n\t\t\t\tgameOver: [gameOver, setGameOver],\r\n\t\t\t\tgameStarted: [gameStarted, setGameStarted],\r\n\t\t\t\tdifficulty: [difficulty, setDifficulty],\r\n\t\t\t\tclickedLetters: [clickedLetters, setClickedLetters],\r\n\t\t\t\tmatchedLetters: [matchedLetters, setMatchedLetters],\r\n\t\t\t\tgameWinCount: [gameWinCount, setGameWinCount],\r\n\t\t\t\tgameLoseCount: [gameLoseCount, setGameLoseCount],\r\n\t\t\t\tincorrectGuessCount: [incorrectGuessCount, setIncorrectGuessCount],\r\n\t\t\t\tmaxLives: [maxLives, setMaxLives],\r\n\t\t\t\tgameOverDisplay: [gameOverDisplay, setGameOverDisplay],\r\n\t\t\t\tgameWinDisplay: [gameWinDisplay, setGameWinDisplay],\r\n\t\t\t\tappLikes: [appLikes, setAppLikes],\r\n\t\t\t\tuserAppLikes: [userAppLikes, setUserAppLikes],\r\n\t\t\t\tuserCoins: [userCoins, setUserCoins],\r\n\t\t\t\twinStreak: [winStreak, setWinStreak],\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{children}\r\n\t\t</Context.Provider>\r\n\t);\r\n};\r\n\r\nexport default Store;\r\n","import \"./wordBlock.scss\";\r\n\r\nexport const BlankSpace = () => {\r\n\treturn <div className=\"blank-space\"></div>;\r\n};\r\n","import \"./wordBlock.scss\";\r\n\r\nexport const CorrectLetter = ({ letter, idx }) => {\r\n\treturn (\r\n\t\t<div className={`correct-letter ${idx === 0 ? \"uppercase\" : \"\"}`}>\r\n\t\t\t{letter}\r\n\t\t</div>\r\n\t);\r\n};\r\n","// import { useState, useContext, useEffect } from \"react\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { Context } from \"../../../helpers/Store\";\r\nimport { BlankSpace } from \"./BlankSpace\";\r\nimport { CorrectLetter } from \"./CorrectLetter\";\r\nimport \"./wordBlock.scss\";\r\n\r\nexport const WordBlock = () => {\r\n\tconst { gameWord, clickedLetters } = useContext(Context);\r\n\tconst [gameWordState] = gameWord;\r\n\tconst [clickedLettersState] = clickedLetters;\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"word-block\">\r\n\t\t\t\t{gameWordState\r\n\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t.split(\"\")\r\n\t\t\t\t\t.map((letter, idx) => {\r\n\t\t\t\t\t\tif (clickedLettersState.includes(letter)) {\r\n\t\t\t\t\t\t\treturn <CorrectLetter key={idx} idx={idx} letter={letter} />;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn <BlankSpace key={idx} />;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n","import \"./letter-block.scss\";\r\nimport { useState, useContext, useEffect } from \"react\";\r\nimport { Context } from \"../../../helpers/Store\";\r\n\r\nexport const LetterSquare = ({ letter }) => {\r\n\tconst {\r\n\t\tgameWord,\r\n\t\tgameWon,\r\n\t\tgameOver,\r\n\t\tmatchedLetters,\r\n\t\tclickedLetters,\r\n\t\tincorrectGuessCount,\r\n\t} = useContext(Context);\r\n\tconst [gameWordState, setGameWordState] = gameWord;\r\n\tconst [gameWonState, setGameWonState] = gameWon;\r\n\tconst [gameOverState, setGameOverState] = gameOver;\r\n\tconst [clickedLettersState, setClickedLettersState] = clickedLetters;\r\n\tconst [matchedLettersState, setMatchedLettersState] = matchedLetters;\r\n\tconst [incorrectGuessCountState, setIncorrectGuessCountState] =\r\n\t\tincorrectGuessCount;\r\n\tconst [clicked, setClicked] = useState(false);\r\n\r\n\tconst addLettersToMatched = (letter) => {\r\n\t\tlet letterInWord = false;\r\n\r\n\t\tgameWordState\r\n\t\t\t.toLowerCase()\r\n\t\t\t.split(\"\")\r\n\t\t\t.forEach((wordLetter) => {\r\n\t\t\t\tif (wordLetter === letter) {\r\n\t\t\t\t\tletterInWord = true;\r\n\t\t\t\t\tsetMatchedLettersState((pv) => [...pv, letter]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\tif (!letterInWord) {\r\n\t\t\tsetIncorrectGuessCountState(incorrectGuessCountState + 1);\r\n\t\t}\r\n\r\n\t\tif (matchedLettersState.length === gameWordState.length - 1) {\r\n\t\t\tsetGameWonState(true);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleClick = (e) => {\r\n\t\tif (clicked === true) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet letter = e.target.textContent;\r\n\t\tsetClicked(true);\r\n\t\tsetClickedLettersState((pv) => [...pv, letter]);\r\n\t\taddLettersToMatched(letter);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tsetClicked(false);\r\n\t}, [gameWonState, gameOverState]);\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={`letter-square ${\r\n\t\t\t\tclickedLettersState.includes(letter) ? \"clicked\" : \"\"\r\n\t\t\t}`}\r\n\t\t\t// className={`letter-square ${clicked ? \"clicked\" : \"\"}`}\r\n\t\t\tonClick={handleClick}\r\n\t\t>\r\n\t\t\t{letter}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import { alphabet } from \"../../../helpers/game-data\";\r\nimport { LetterSquare } from \"./LetterSquare\";\r\n\r\nexport const LetterBlock = () => {\r\n\treturn (\r\n\t\t<div className=\"letter-block\">\r\n\t\t\t{alphabet.map((letter) => {\r\n\t\t\t\treturn <LetterSquare key={letter} letter={letter} />;\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import \"./heart-block.scss\";\r\n\r\nimport { useState, useContext, useEffect } from \"react\";\r\nimport { Context } from \"../../../helpers/Store\";\r\n\r\nexport const HeartBlock = () => {\r\n\tconst {\r\n\t\tgameWord,\r\n\t\tgameWon,\r\n\t\tgameOver,\r\n\t\tmatchedLetters,\r\n\t\tclickedLetters,\r\n\t\tgameWinCount,\r\n\t\tgameLoseCount,\r\n\t\tincorrectGuessCount,\r\n\t\tmaxLives,\r\n\t} = useContext(Context);\r\n\r\n\tconst [gameWonState, setGameWonState] = gameWon;\r\n\tconst [gameOverState, setGameOverState] = gameOver;\r\n\tconst [gameWordsState, setGameWordState] = gameWord;\r\n\tconst [clickedLettersState, setClickedLettersState] = clickedLetters;\r\n\tconst [matchedLettersState, setMatchedLettersState] = matchedLetters;\r\n\tconst [gameWinCountState, setGameWinCountState] = gameWinCount;\r\n\tconst [gameLoseCountState, setGameLoseCountState] = gameLoseCount;\r\n\tconst [incorrectGuessCountState, setIncorrectGuessCountState] =\r\n\t\tincorrectGuessCount;\r\n\tconst [maxLivesState, setMaxLivesState] = maxLives;\r\n\tconst [shakeEffect, setShakeEffect] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetShakeEffect(true);\r\n\t\tsetTimeout(() => {\r\n\t\t\tsetShakeEffect(false);\r\n\t\t}, 820);\r\n\t}, [incorrectGuessCountState]);\r\n\r\n\treturn (\r\n\t\t<div className={`heart-block ${shakeEffect ? \"shake\" : \"\"}`}>\r\n\t\t\t{[...Array(maxLivesState)].map((x, i) => {\r\n\t\t\t\tif (maxLivesState - i + 1 <= incorrectGuessCountState + 1) {\r\n\t\t\t\t\treturn <i class=\"far fa-heart\"></i>;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn <i class=\"fas fa-heart\"></i>;\r\n\t\t\t\t}\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import \"./details-block.scss\";\r\n\r\nimport { useContext, useEffect } from \"react\";\r\nimport { Context } from \"../../../helpers/Store\";\r\n\r\nimport { getRandomWord } from \"../../../helpers/game-data\";\r\nimport { HeartBlock } from \"../heart-block/HeartBlock\";\r\nimport { WordBlock } from \"../word-block/WordBlock\";\r\n\r\nexport const DetailsBlock = () => {\r\n\tconst {\r\n\t\tgameWord,\r\n\t\tgameWon,\r\n\t\tgameOver,\r\n\t\tdifficulty,\r\n\t\tmatchedLetters,\r\n\t\tclickedLetters,\r\n\t\tgameWinCount,\r\n\t\tgameLoseCount,\r\n\t\tincorrectGuessCount,\r\n\t\tmaxLives,\r\n\t\tuserCoins,\r\n\t\twinStreak,\r\n\t} = useContext(Context);\r\n\r\n\tconst [gameWonState, setGameWonState] = gameWon;\r\n\tconst [gameOverState, setGameOverState] = gameOver;\r\n\tconst [gameWordsState, setGameWordState] = gameWord;\r\n\tconst [difficultyState, setDifficultyState] = difficulty;\r\n\tconst [clickedLettersState, setClickedLettersState] = clickedLetters;\r\n\tconst [matchedLettersState, setMatchedLettersState] = matchedLetters;\r\n\tconst [gameWinCountState, setGameWinCountState] = gameWinCount;\r\n\tconst [gameLoseCountState, setGameLoseCountState] = gameLoseCount;\r\n\tconst [incorrectGuessCountState, setIncorrectGuessCountState] =\r\n\t\tincorrectGuessCount;\r\n\tconst [maxLivesState, setMaxLivesState] = maxLives;\r\n\tconst [userCoinsState, setUserCoinsState] = userCoins;\r\n\tconst [winStreakState, setWinStreakState] = winStreak;\r\n\r\n\tconst handleReset = () => {\r\n\t\tsetClickedLettersState([]);\r\n\t\tsetMatchedLettersState([]);\r\n\t\tsetGameWordState(getRandomWord());\r\n\t\tsetIncorrectGuessCountState(0);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"details-block\">\r\n\t\t\t<h2>React Hangman</h2>\r\n\t\t\t<div className=\"details\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\tWins: <span className=\"stats-count\">{gameWinCountState}</span>\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tWinstreak: <span className=\"stats-count\">{winStreakState}</span>\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tLosses: <span className=\"stats-count\">{gameLoseCountState}</span>\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<p>\r\n\t\t\t\tCoins: <span>{userCoinsState}</span>\r\n\t\t\t</p>\r\n\t\t\t<HeartBlock />\r\n\t\t\t<WordBlock />\r\n\t\t</div>\r\n\t);\r\n};\r\n","import \"./game-screens.scss\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { Context } from \"../../../helpers/Store\";\r\nimport { getRandomWord } from \"../../../helpers/game-data\";\r\n\r\nexport const GameOver = () => {\r\n\tconst {\r\n\t\tgameWord,\r\n\t\tgameWon,\r\n\t\tgameOver,\r\n\t\tdifficulty,\r\n\t\tgameStarted,\r\n\t\tmatchedLetters,\r\n\t\tclickedLetters,\r\n\t\tgameWinCount,\r\n\t\tgameLoseCount,\r\n\t\tincorrectGuessCount,\r\n\t\tmaxLives,\r\n\t\tgameOverDisplay,\r\n\t} = useContext(Context);\r\n\r\n\tconst [gameWonState, setGameWonState] = gameWon;\r\n\tconst [gameOverState, setGameOverState] = gameOver;\r\n\tconst [gameWordsState, setGameWordState] = gameWord;\r\n\tconst [difficultyState, setDifficultyState] = difficulty;\r\n\tconst [gameStartedState, setGameStartedState] = gameStarted;\r\n\tconst [clickedLettersState, setClickedLettersState] = clickedLetters;\r\n\tconst [matchedLettersState, setMatchedLettersState] = matchedLetters;\r\n\tconst [gameWinCountState, setGameWinCountState] = gameWinCount;\r\n\tconst [gameLoseCountState, setGameLoseCountState] = gameLoseCount;\r\n\tconst [incorrectGuessCountState, setIncorrectGuessCountState] =\r\n\t\tincorrectGuessCount;\r\n\tconst [maxLivesState, setMaxLivesState] = maxLives;\r\n\tconst [gameOverDisplayState, setGameOverDisplayState] = gameOverDisplay;\r\n\r\n\tconst handleReset = () => {\r\n\t\tsetClickedLettersState([]);\r\n\t\tsetMatchedLettersState([]);\r\n\t\tsetGameWordState(getRandomWord());\r\n\t\tsetIncorrectGuessCountState(0);\r\n\t\tsetGameOverDisplayState(false);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"game-state lose\">\r\n\t\t\t<h2>Game Over</h2>\r\n\t\t\t<p>You ran out of lives</p>\r\n\t\t\t<p>\r\n\t\t\t\tThe word was <span>{gameWordsState}</span>\r\n\t\t\t</p>\r\n\t\t\t<button className=\"game-reset\" onClick={handleReset}>\r\n\t\t\t\tPlay Again\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import \"./game-screens.scss\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { Context } from \"../../../helpers/Store\";\r\nimport { getRandomWord } from \"../../../helpers/game-data\";\r\n\r\nexport const GameWin = () => {\r\n\tconst {\r\n\t\tgameWord,\r\n\t\tgameWon,\r\n\t\tgameOver,\r\n\t\tdifficulty,\r\n\t\tgameStarted,\r\n\t\tmatchedLetters,\r\n\t\tclickedLetters,\r\n\t\tgameWinCount,\r\n\t\tgameLoseCount,\r\n\t\tincorrectGuessCount,\r\n\t\tmaxLives,\r\n\t\tgameOverDisplay,\r\n\t\tgameWinDisplay,\r\n\t\tuserCoins,\r\n\t} = useContext(Context);\r\n\r\n\tconst [gameWonState, setGameWonState] = gameWon;\r\n\tconst [gameOverState, setGameOverState] = gameOver;\r\n\tconst [gameWordsState, setGameWordState] = gameWord;\r\n\tconst [difficultyState, setDifficultyState] = difficulty;\r\n\tconst [gameStartedState, setGameStartedState] = gameStarted;\r\n\tconst [clickedLettersState, setClickedLettersState] = clickedLetters;\r\n\tconst [matchedLettersState, setMatchedLettersState] = matchedLetters;\r\n\tconst [gameWinCountState, setGameWinCountState] = gameWinCount;\r\n\tconst [gameLoseCountState, setGameLoseCountState] = gameLoseCount;\r\n\tconst [incorrectGuessCountState, setIncorrectGuessCountState] =\r\n\t\tincorrectGuessCount;\r\n\tconst [maxLivesState, setMaxLivesState] = maxLives;\r\n\tconst [gameOverDisplayState, setGameOverDisplayState] = gameOverDisplay;\r\n\tconst [gameWinDisplayState, setGameWinDisplayState] = gameWinDisplay;\r\n\tconst [userCoinsState, setUserCoinsState] = userCoins;\r\n\r\n\tconst handleReset = () => {\r\n\t\tsetClickedLettersState([]);\r\n\t\tsetMatchedLettersState([]);\r\n\t\tsetGameWordState(getRandomWord());\r\n\t\tsetIncorrectGuessCountState(0);\r\n\t\tsetUserCoinsState(userCoinsState + 10);\r\n\t\tsetGameWinDisplayState(false);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"game-state win\">\r\n\t\t\t<h2>You Win!</h2>\r\n\t\t\t<p>\r\n\t\t\t\tYou guessed the word <span>{gameWordsState}</span> and received{\" \"}\r\n\t\t\t\t<span>10</span> coins\r\n\t\t\t</p>\r\n\t\t\t<button className=\"game-reset\" onClick={handleReset}>\r\n\t\t\t\tPlay Again\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import \"./ContextMenu.scss\";\r\nimport {\r\n\tMoon,\r\n\tCornerUpRight,\r\n\tSliders,\r\n\tCode,\r\n\tRefreshCw,\r\n\tHelpCircle,\r\n\tHeart,\r\n\tCheck,\r\n\tSmile,\r\n\tMeh,\r\n\tFrown,\r\n\tExternalLink,\r\n} from \"react-feather\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { Context } from \"../../../helpers/Store\";\r\nimport { getRandomWord } from \"../../../helpers/game-data\";\r\n\r\nconst copyToClipboard = () => {\r\n\tnavigator.clipboard.writeText(\"https://aaronsoto.io\");\r\n};\r\n\r\nexport const ContextMenu = ({ x, y }) => {\r\n\tconst {\r\n\t\tgameWord,\r\n\t\tgameWon,\r\n\t\tgameOver,\r\n\t\tdifficulty,\r\n\t\tmatchedLetters,\r\n\t\tclickedLetters,\r\n\t\tgameWinCount,\r\n\t\tgameLoseCount,\r\n\t\tincorrectGuessCount,\r\n\t\tmaxLives,\r\n\t\tappLikes,\r\n\t\tuserAppLikes,\r\n\t\tuserCoins,\r\n\t} = useContext(Context);\r\n\r\n\tconst [gameWonState, setGameWonState] = gameWon;\r\n\tconst [gameOverState, setGameOverState] = gameOver;\r\n\tconst [gameWordsState, setGameWordState] = gameWord;\r\n\tconst [difficultyState, setDifficultyState] = difficulty;\r\n\tconst [clickedLettersState, setClickedLettersState] = clickedLetters;\r\n\tconst [matchedLettersState, setMatchedLettersState] = matchedLetters;\r\n\tconst [gameWinCountState, setGameWinCountState] = gameWinCount;\r\n\tconst [gameLoseCountState, setGameLoseCountState] = gameLoseCount;\r\n\tconst [incorrectGuessCountState, setIncorrectGuessCountState] =\r\n\t\tincorrectGuessCount;\r\n\tconst [maxLivesState, setMaxLivesState] = maxLives;\r\n\tconst [appLikesState, setAppLikesState] = appLikes;\r\n\tconst [userAppLikesState, setUserAppLikesState] = userAppLikes;\r\n\tconst [userCoinsState, setUserCoinsState] = userCoins;\r\n\r\n\tconst handleReset = () => {\r\n\t\tsetClickedLettersState([]);\r\n\t\tsetMatchedLettersState([]);\r\n\t\tsetGameWordState(getRandomWord());\r\n\t\tsetIncorrectGuessCountState(0);\r\n\t};\r\n\r\n\tconst handleDifficultyChange = (difficulty) => {\r\n\t\tif (difficulty === \"easy\") {\r\n\t\t\tsetDifficultyState(\"easy\");\r\n\t\t} else if (difficulty === \"medium\") {\r\n\t\t\tsetDifficultyState(\"medium\");\r\n\t\t} else if (difficulty === \"hard\") {\r\n\t\t\tsetDifficultyState(\"hard\");\r\n\t\t}\r\n\r\n\t\thandleReset();\r\n\t};\r\n\r\n\tconst handleLike = () => {\r\n\t\tif (userAppLikesState < 50) {\r\n\t\t\tsetUserAppLikesState(userAppLikesState + 1);\r\n\t\t\tsetAppLikesState(appLikesState + 1);\r\n\t\t}\r\n\t};\r\n\r\n\tconst guessRandomLetter = () => {\r\n\t\tif (userCoinsState < 10) {\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tsetUserCoinsState(userCoinsState - 10);\r\n\t\t}\r\n\t\tlet unguessedLetters = gameWordsState\r\n\t\t\t.toLowerCase()\r\n\t\t\t.split(\"\")\r\n\t\t\t.filter((letter) => !clickedLettersState.includes(letter));\r\n\t\tlet randomUnguessedLetter =\r\n\t\t\tunguessedLetters[Math.floor(Math.random() * unguessedLetters.length)];\r\n\r\n\t\tsetClickedLettersState((pv) => [...pv, randomUnguessedLetter]);\r\n\t\tsetMatchedLettersState((pv) => [...pv, randomUnguessedLetter]);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div class=\"menu\" style={{ left: x, top: y }}>\r\n\t\t\t{/* <div>Copied Link to clipboard</div> */}\r\n\t\t\t<ul class=\"menu-list\">\r\n\t\t\t\t<li class=\"menu-item\">\r\n\t\t\t\t\t<button class=\"menu-button\" onClick={copyToClipboard}>\r\n\t\t\t\t\t\t<CornerUpRight /> Share\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li class=\"menu-item\">\r\n\t\t\t\t\t<button class=\"menu-button\">\r\n\t\t\t\t\t\t<Moon /> Dark Mode\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t<ul class=\"menu-list\">\r\n\t\t\t\t<li class=\"menu-item\">\r\n\t\t\t\t\t<button class=\"menu-button\">\r\n\t\t\t\t\t\t<Sliders /> Difficulty\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<ul class=\"menu-sub-list\">\r\n\t\t\t\t\t\t<li class=\"menu-item\">\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tclass=\"menu-button menu-button--green\"\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tif (difficultyState === \"easy\") {\r\n\t\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tsetDifficultyState(\"easy\");\r\n\t\t\t\t\t\t\t\t\thandleReset();\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Smile /> Easy\r\n\t\t\t\t\t\t\t\t{difficultyState === \"easy\" ? <Check /> : \"\"}\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li class=\"menu-item\">\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tclass=\"menu-button menu-button--orange\"\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tif (difficultyState === \"medium\") {\r\n\t\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tsetDifficultyState(\"medium\");\r\n\t\t\t\t\t\t\t\t\thandleReset();\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Meh /> Medium\r\n\t\t\t\t\t\t\t\t{difficultyState === \"medium\" ? <Check /> : \"\"}\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li class=\"menu-item\">\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tclass=\"menu-button menu-button--red\"\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tif (difficultyState === \"hard\") {\r\n\t\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tsetDifficultyState(\"hard\");\r\n\t\t\t\t\t\t\t\t\thandleReset();\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Frown /> Hard\r\n\t\t\t\t\t\t\t\t{difficultyState === \"hard\" ? <Check /> : \"\"}\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li class=\"menu-item\">\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclass=\"menu-button right-icon\"\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\twindow.open(\r\n\t\t\t\t\t\t\t\t\"https://github.com/aaron-soto/HangmanProject\",\r\n\t\t\t\t\t\t\t\t\"_blank\"\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Code /> Code{\" \"}\r\n\t\t\t\t\t\t<span className=\"link-icon\">\r\n\t\t\t\t\t\t\t<ExternalLink />\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li class=\"menu-item\">\r\n\t\t\t\t\t<button class=\"menu-button right-icon\" onClick={handleLike}>\r\n\t\t\t\t\t\t<Heart /> Like\r\n\t\t\t\t\t\t<span className=\"likes\">{appLikesState} likes</span>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li class=\"menu-item\">\r\n\t\t\t\t\t<button class=\"menu-button right-icon\" onClick={guessRandomLetter}>\r\n\t\t\t\t\t\t<HelpCircle /> Use Hint <span className=\"cost\">-10 coins</span>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t<ul class=\"menu-list\">\r\n\t\t\t\t<li class=\"menu-item\">\r\n\t\t\t\t\t<button class=\"menu-button menu-button--delete\" onClick={handleReset}>\r\n\t\t\t\t\t\t<RefreshCw /> New Word\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import { useState, useContext, useEffect } from \"react\";\r\nimport { Context } from \"../../helpers/Store\";\r\n\r\nimport { getRandomWord } from \"../../helpers/game-data\";\r\n\r\nimport { WordBlock } from \"../../ui/game-components/word-block/WordBlock\";\r\nimport { LetterBlock } from \"../../ui/game-components/letter-block/LetterBlock\";\r\nimport { DetailsBlock } from \"../../ui/game-components/details-block/DetailsBlock\";\r\nimport { HeartBlock } from \"../../ui/game-components/heart-block/HeartBlock\";\r\nimport { GameOver } from \"../../ui/game-components/game-screens/GameOver\";\r\nimport { GameWin } from \"../../ui/game-components/game-screens/GameWin\";\r\nimport { ContextMenu } from \"../../ui/ui-elements/context-menu/ContextMenu\";\r\n\r\nexport const Hangman = () => {\r\n\tconst {\r\n\t\tgameWord,\r\n\t\tgameWon,\r\n\t\tgameOver,\r\n\t\tdifficulty,\r\n\t\tgameStarted,\r\n\t\tmatchedLetters,\r\n\t\tclickedLetters,\r\n\t\tgameWinCount,\r\n\t\tgameLoseCount,\r\n\t\tincorrectGuessCount,\r\n\t\tmaxLives,\r\n\t\tgameOverDisplay,\r\n\t\tgameWinDisplay,\r\n\t\twinStreak,\r\n\t} = useContext(Context);\r\n\r\n\tconst [gameWonState, setGameWonState] = gameWon;\r\n\tconst [gameOverState, setGameOverState] = gameOver;\r\n\tconst [gameWordsState, setGameWordState] = gameWord;\r\n\tconst [difficultyState, setDifficultyState] = difficulty;\r\n\tconst [gameStartedState, setGameStartedState] = gameStarted;\r\n\tconst [clickedLettersState, setClickedLettersState] = clickedLetters;\r\n\tconst [matchedLettersState, setMatchedLettersState] = matchedLetters;\r\n\tconst [gameWinCountState, setGameWinCountState] = gameWinCount;\r\n\tconst [gameLoseCountState, setGameLoseCountState] = gameLoseCount;\r\n\tconst [incorrectGuessCountState, setIncorrectGuessCountState] =\r\n\t\tincorrectGuessCount;\r\n\tconst [maxLivesState, setMaxLivesState] = maxLives;\r\n\tconst [gameOverDisplayState, setGameOverDisplayState] = gameOverDisplay;\r\n\tconst [gameWinDisplayState, setGameWinDisplayState] = gameWinDisplay;\r\n\tconst [modalX, setModalX] = useState(0);\r\n\tconst [modalY, setModalY] = useState(0);\r\n\tconst [modalView, setModalView] = useState(false);\r\n\tconst [winStreakState, setWinStreakState] = winStreak;\r\n\r\n\tconst resetGameWon = () => {\r\n\t\tsetGameWinDisplayState(true);\r\n\t\tsetClickedLettersState([]);\r\n\t\tsetMatchedLettersState([]);\r\n\t\tsetGameWonState(false);\r\n\t\tsetIncorrectGuessCountState(0);\r\n\t\tsetWinStreakState(winStreakState + 1);\r\n\t\tsetGameWinCountState(gameWinCountState + 1);\r\n\t};\r\n\tconst resetGameLose = () => {\r\n\t\tsetGameOverDisplayState(true);\r\n\t\tsetClickedLettersState([]);\r\n\t\tsetMatchedLettersState([]);\r\n\t\tsetGameOverState(false);\r\n\t\tsetIncorrectGuessCountState(0);\r\n\t\tsetWinStreakState(0);\r\n\t\tsetGameLoseCountState(gameLoseCountState + 1);\r\n\t};\r\n\r\n\tconst handleReset = () => {\r\n\t\tsetClickedLettersState([]);\r\n\t\tsetMatchedLettersState([]);\r\n\t\tsetGameWordState(getRandomWord());\r\n\t\tsetIncorrectGuessCountState(0);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (difficultyState === \"easy\") {\r\n\t\t\tsetMaxLivesState(7);\r\n\t\t} else if (difficultyState === \"medium\") {\r\n\t\t\tsetMaxLivesState(5);\r\n\t\t} else if (difficultyState === \"hard\") {\r\n\t\t\tsetMaxLivesState(3);\r\n\t\t}\r\n\t}, [difficultyState]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (incorrectGuessCountState >= maxLivesState) {\r\n\t\t\tsetGameOverState(true);\r\n\t\t}\r\n\t}, [incorrectGuessCountState, maxLivesState, setGameOverState]);\r\n\r\n\tdocument.addEventListener(\"contextmenu\", (e) => {\r\n\t\tsetModalView(true);\r\n\t\te.preventDefault();\r\n\t\tif (e.clientX > window.innerWidth - 200) {\r\n\t\t\tsetModalX(e.clientX - 220);\r\n\t\t} else {\r\n\t\t\tsetModalX(e.clientX);\r\n\t\t}\r\n\t\tif (e.clientY > window.innerHeight - 365) {\r\n\t\t\tsetModalY(e.clientY - 365);\r\n\t\t} else {\r\n\t\t\tsetModalY(e.clientY);\r\n\t\t}\r\n\t});\r\n\tdocument.addEventListener(\"click\", (e) => {\r\n\t\te.preventDefault();\r\n\t\t// if (e.target.attributes[0] != \"menu-list\") {\r\n\t\t// \tconsole.log(\"outside\");\r\n\t\t// }\r\n\t\tif (e.target.tagName === \"BUTTON\") {\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tsetModalView(false);\r\n\t\t}\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t{gameOverDisplayState && <GameOver />}\r\n\t\t\t{gameWinDisplayState && <GameWin />}\r\n\t\t\t<DetailsBlock />\r\n\r\n\t\t\t{gameWonState ? resetGameWon() : \"\"}\r\n\t\t\t{gameOverState ? resetGameLose() : \"\"}\r\n\t\t\t<LetterBlock />\r\n\t\t\t{modalView && <ContextMenu x={modalX} y={modalY} />}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import \"./sassStyles/_global.scss\";\nimport Store from \"./components/helpers/Store\";\n\nimport { Hangman } from \"./components/layout/hangman/Hangman\";\n\nfunction App() {\n\treturn (\n\t\t<Store>\n\t\t\t<div className=\"App\">\n\t\t\t\t<Hangman />\n\t\t\t</div>\n\t\t</Store>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}